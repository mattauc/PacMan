/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;




class GhostTest {

    //Testing the construction of subclasses
    @Test
    public void ghostConstruct() throws InterruptedException {
        Ghost ambusherT = new Ambusher(0,0,false,null,null,null);
        Ghost ignorantT = new Ambusher(0,0,false,null,null,null);
        Ghost whimT = new Ambusher(0,0,false,null,null,null);
        Ghost chaserT = new Ambusher(0,0,false,null,null,null);

        assertNotNull(chaserT);
        assertNotNull(ambusherT);
        assertNotNull(whimT);
        assertNotNull(ignorantT);
        Thread.sleep(1000);
    }
    //Testing the construction and destination detection of subGhosts
    @Test
    public void ghostSubTest() throws InterruptedException {
        Ambusher ambusherT = new Ambusher(0,0,false,null,null,null);
        Ignorant ignorantT = new Ignorant(0,0,false,null,null,null);
        Whim whimT = new Whim(0,0,false,null,null,null);
        Chaser chaserT = new Chaser(0,0,false,null,null,null);

        Ghost.setConditions(new int[]{0},0,0,0);
        assertNotNull(chaserT);
        assertNotNull(ambusherT);
        assertNotNull(whimT);
        assertNotNull(ignorantT);

        ambusherT.updateStep(0, 0);
        ignorantT.updateStep(0,0);
        whimT.updateStep(0,0);
        chaserT.updateStep(0,0);

        //Checking all ghost search mode destination detection
        Ghost.setMode(false);
        Entities.setWaka(new int[]{0,1}, "D");
        assertTrue(Arrays.equals(ambusherT.updateStep(0,0),new int[]{0,5}));
        assertTrue(Arrays.equals(ignorantT.updateStep(0,0),new int[]{35,0}));
        assertTrue(Arrays.equals(whimT.updateStep(0,0),new int[]{0,6}));
        assertTrue(Arrays.equals(chaserT.updateStep(0,0),new int[]{0,1}));
        Thread.sleep(1000);
    }
    
    //Testing ghost search movement
    @Test
    public void ghostMovementTest() throws InterruptedException {
        Ghost ambusherT = new Ambusher(5,5,false,null,null,null);
        Ghost ignorantT = new Ignorant(1,1,false,null,null,null);
        Ghost whimT = new Whim(5,5,false,null,null,null);
        Ghost chaserT = new Chaser(5,5,false,null,null,null);

        Entities[][] testGrid = new Entities[15][15];
        for (int y = 0;y<testGrid.length;y++) {
            for (int x = 0;x<testGrid[0].length;x++) {
                testGrid[y][x] = new Walls(0,0,false,null);
            }
        }
        Ghost.setConditions(new int[]{0},0,1,0);
        Entities.setGrid(testGrid);
        Entities.setWaka(new int[]{0,0},"A");

        ambusherT.tick();
        assertTrue(Arrays.equals(ambusherT.getPixels(),new int[]{5*16,5*16-(int)Ghost.speed}));

        Entities.setWaka(new int[]{5,9},"D");
        ambusherT.tileUpdate(true);
        assertTrue(Arrays.equals(ambusherT.getTile(),new int[]{5,4}));
        ambusherT.tick();

        ambusherT.randomMovement();
        
        Entities.setWaka(new int[]{0,9},"A");
        whimT.openingCheck();
        whimT.tileUpdate(false);
        assertTrue(Arrays.equals(whimT.getTile(),new int[]{4,5}));
        whimT.tick();

        whimT.randomMovement();

        Entities.setWaka(new int[]{11,9},"S");
        ignorantT.openingCheck();
        ignorantT.tileUpdate(false);
        ignorantT.tick();
        ignorantT.tileUpdate(false);
        assertTrue(Arrays.equals(ignorantT.getTile(),new int[]{3,1}));
        //Checking ignorant 8 tile functionality
        ignorantT.tileUpdate(false);
        assertTrue(Arrays.equals(ignorantT.getTile(),new int[]{3,1}));

        ignorantT.randomMovement();

        Entities.setWaka(new int[]{5,9},"W");
        chaserT.openingCheck();
        chaserT.tileUpdate(true);
        chaserT.tileUpdate(true);
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{5,6}));
        chaserT.tick();

        chaserT.randomMovement();
        Thread.sleep(1000);
    }

    //Testing ghost condition initialization and base states
    @Test
    public void ghostConditionTest() throws InterruptedException {
        Ghost ghostTest = new Ambusher(0,0,false,null,null,null);

        Ghost.setConditions(new int[]{0}, 1, 2, 3);
        assertTrue(Arrays.equals(Ghost.modeLength, new int[]{0}));
        assertTrue(Ghost.frigthenedLength == 1);
        assertTrue(Ghost.speed == 2);
        assertTrue(Ghost.evilLength == 3);

        assertTrue(ghostTest.alive);
        assertTrue(ghostTest.isGhost());
        assertFalse(ghostTest.getSolid());
        Thread.sleep(1000);
    }

    //Testing ghost mode conditions
    @Test
    public void ghostModeTest() throws InterruptedException {
        Ghost gTest = new Ambusher(0,0,false,null,null,null);
        Ghost.setConditions(new int[]{0,0}, 0, 0, 0);

        Ghost.setFrightened(true);
        gTest.collectibleCheck();
        assertFalse(Ghost.isFrightened());

        Ghost.setFrightened(true);
        Ghost.setConditions(new int[]{0,0}, 10, 0, 0);
        gTest.collectibleCheck();
        assertTrue(Ghost.isFrightened());

        Ghost.setInvisible(true);
        gTest.collectibleCheck();
        assertFalse(Ghost.isInvisible());

        Ghost.setInvisible(true);
        Ghost.setConditions(new int[]{0,0}, 0, 0, 10);
        gTest.collectibleCheck();
        assertTrue(Ghost.isInvisible());

        Ghost.setMode(false);
        Ghost.setFrightened(false);
        Ghost.setInvisible(false);
        Thread.sleep(1000);
    }

    //Testing the method wakaCheck that aids detection
    @Test
    public void wakaCheckTest() throws InterruptedException {
        Ghost ambusherT = new Ambusher(0,0,false,null,null,null);

        Entities.setWaka(new int[]{0,0}, "A");
        assertTrue(Arrays.equals(ambusherT.wakaCheck(0,0,4), new int[]{0,-4}));
        Entities.setWaka(new int[]{0,0}, "W");
        assertTrue(Arrays.equals(ambusherT.wakaCheck(0,0,4), new int[]{-4,0}));
        Entities.setWaka(new int[]{0,0}, "S");
        assertTrue(Arrays.equals(ambusherT.wakaCheck(0,0,4), new int[]{4,0}));
        Entities.setWaka(new int[]{0,0}, "D");
        assertTrue(Arrays.equals(ambusherT.wakaCheck(0,0,4), new int[]{0,4}));
        Entities.setWaka(new int[]{0,0}, "F");
        assertTrue(Arrays.equals(ambusherT.wakaCheck(0,0,4), new int[]{0,0}));
        Thread.sleep(1000);
    }

    //Testing all branches of intersectionCheck
    @Test
    public void ghostIntersectionTest() throws InterruptedException {
        Ghost chaserT = new Chaser(7,7,false,null,null,null);

        Entities[][] testGrid = new Entities[15][15];
        for (int y = 0;y<testGrid.length;y++) {
            for (int x = 0;x<testGrid[0].length;x++) {
                testGrid[y][x] = new Walls(x,y,false,null);
            }
        }
        Ghost.setConditions(new int[]{0},0,1,0);
        Entities.setGrid(testGrid);
        Entities.setWaka(new int[]{7,1},"A");

        for (int i=0;i<16;i++) {
            chaserT.tick();
        }
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{7,6}));

        Entities.setWaka(new int[]{6,6},"W");
        for (int i=0;i<32;i++) {
            chaserT.tick();
        }
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{6,5}));

        Entities.setWaka(new int[]{7,5},"D");
        for (int i=0;i<16;i++) {
            chaserT.tick();
        }
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{6,6}));

        Entities.setWaka(new int[]{14,4},"D");
        for (int i=0;i<16;i++) {
            chaserT.tick();
        }
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{7,6}));
        Thread.sleep(1000);
    }

    //Checks whether kill functionality inhibits movemment
    @Test
    public void ghostKillTest() throws InterruptedException {
        Ghost chaserT = new Chaser(0,0,false,null,null,null);
        chaserT.killGhost();
        chaserT.tick();
        assertTrue(Arrays.equals(chaserT.getPixels(),new int[]{0,0}));
    }

    //Checks whether movement correctly transitions between frightened mode
    @Test
    public void ghostFrightenedIntersectionTest() throws InterruptedException {
        Ambusher ambusherT = new Ambusher(2,2,false,null,null,null);
        Ignorant ignorantT = new Ignorant(2,2,false,null,null,null);
        Whim whimT = new Whim(2,2,false,null,null,null);
        Chaser chaserT = new Chaser(2,2,false,null,null,null);

        Ghost.setConditions(new int[]{0},0,1,0);

        assertFalse(ambusherT.frightenedTurn());    
        Ghost.setFrightened(true);

        Entities[][] testGrid = new Entities[5][5];
        for (int y = 0;y<testGrid.length;y++) {
            for (int x = 0;x<testGrid[0].length;x++) {
                testGrid[y][x] = new Walls(x,y,true,null);
            }
        }
        //Creating a grid environment to test reverse and random movement
        testGrid[2][2] = new Walls(2,2,false,null);

        //Left
        testGrid[2][1] = new Walls(1,2,false,null);
        Entities.setGrid(testGrid);
        ambusherT.randomMovement();

        ambusherT.intersectionCheck();
        ambusherT.tileUpdate(true);
        assertTrue(Arrays.equals(ambusherT.getTile(),new int[]{2,1}));
        ambusherT.tileUpdate(true);
        assertTrue(Arrays.equals(ambusherT.getTile(),new int[]{2,2}));

        //Right
        testGrid[2][1] = new Walls(1,2,true,null);
        testGrid[2][3] = new Walls(3,2,false,null);
        Entities.setGrid(testGrid);
        ignorantT.randomMovement();

        ignorantT.intersectionCheck();
        ignorantT.tileUpdate(true);
        assertTrue(Arrays.equals(ignorantT.getTile(),new int[]{2,3}));
        ignorantT.tileUpdate(true);
        assertTrue(Arrays.equals(ignorantT.getTile(),new int[]{2,2}));


        //Down
        testGrid[2][3] = new Walls(3,2,true,null);
        testGrid[3][2] = new Walls(2,3,false,null);
        Entities.setGrid(testGrid);
        whimT.randomMovement();

        whimT.intersectionCheck();
        whimT.tileUpdate(false);
        assertTrue(Arrays.equals(whimT.getTile(),new int[]{2,2}));
        whimT.tileUpdate(false);
        assertTrue(Arrays.equals(whimT.getTile(),new int[]{3,2}));
        whimT.tileUpdate(false);
        assertTrue(Arrays.equals(whimT.getTile(),new int[]{2,2}));

        //Up
        testGrid[3][2] = new Walls(2,3,true,null);
        testGrid[1][2] = new Walls(2,1,false,null);
        Entities.setGrid(testGrid);
        chaserT.randomMovement();

        chaserT.intersectionCheck();
        chaserT.tileUpdate(false);
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{2,2}));
        chaserT.tileUpdate(false);
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{1,2}));
        chaserT.tileUpdate(false);
        assertTrue(Arrays.equals(chaserT.getTile(),new int[]{2,2}));
        Thread.sleep(1000);
    }
}